<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Seguro Saúde</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css">
</head>
<body>
  <div>
    <label for="insuranceSelect">Selecionar Seguro:</label>
    <select id="insuranceSelect"></select>
  </div>
  <div>
    <label for="searchInput">Pesquisar:</label>
    <input type="text" id="searchInput">
  </div>
  <div>
    <label for="startDatePicker">Filtrar por Data:</label>
    <input type="text" id="startDatePicker">
    <button id="todayButton">Hoje</button>
  </div>
  <table>
    <thead>
      <tr>
        <th>Número</th>
        <th>Data <i id="sortDate" class="fas fa-sort"></i></th>
        <th>Paciente</th>
        <th>Seguro</th>
        <th>Preço</th>
      </tr>
    </thead>
    <tbody id="guidesBody"></tbody>
  </table>
  <div id="pagination"></div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
  <script>
    const data = {
      "insurances": [{
          "id": 3322,
          "name": "Amil"
      }, {
          "id": 3293,
          "name": "Bradesco"
      }, {
          "id": 99231,
          "name": "Hapvida"
      }, {
          "id": 1322,
          "name": "CASSI"
      }, {
          "id": 23111,
          "name": "Sulamérica"
      }],
      "guides": [{
          "number": "3210998321",
          "start_date": "2023-12-23T19:18:47.210Z",
          "patient": {
              "id": 9321123,
              "name": "Augusto Ferreira",
              "thumb_url": "https://imgsapp2.correiobraziliense.com.br/app/noticia_127983242361/2019/10/04/794834/20191004154953157610i.jpg"
          },
          "insurance_id": 1322,
          "health_insurance": {
              "id": 1322,
              "name": "CASSI",
              "is_deleted": false
          },
          "price": 5567.2
      }, {
          "number": "287312832",
          "start_date": "2022-11-23T19:18:47.210Z",
          "patient": {
              "id": 93229123,
              "name": "Caio Carneiro",
              "thumb_url": "http://3.bp.blogspot.com/-XG5bGlqGnJw/T9lIcssnybI/AAAAAAAADTA/B23ezXOkx8Y/s1600/Aang.jpg"
          },
          "insurance_id": 1322,
          "health_insurance": {
              "id": 1322,
              "name": "CASSI",
              "is_deleted": false
          },
          "price": 213.3
      }, {
          "number": "283718273",
          "start_date": "2023-10-22T19:18:47.210Z",
          "patient": {
              "id": 213122388,
              "name": "Luciano José",
              "thumb_url": "https://i.ytimg.com/vi/yUXd-enstO8/maxresdefault.jpg"
          },
          "insurance_id": 3293,
          "health_insurance": {
              "id": 3293,
              "name": "Bradesco",
              "is_deleted": true
          },
          "price": 88.99
      }, {
          "number": "009090321938",
          "start_date": "2023-09-20T19:18:47.210Z",
          "patient": {
              "id": 3367263,
              "name": "Felício Santos",
              "thumb_url": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPSxlYabmRlKk43uvsBMIqjA7Rw_YCwK4TyA&usqp=CAU"
          },
          "insurance_id": 3293,
          "health_insurance": {
              "id": 3293,
              "name": "Bradesco",
              "is_deleted": true
          },
          "price": 828.99
      }, {
          "number": "8787128731",
          "start_date": "2023-08-01T19:18:47.210Z",
          "patient": {
              "id": 777882,
              "name": "Fernando Raposo",
              "thumb_url": "https://via.placeholder.com/150x150.jpg"
          },
          "insurance_id": 3322,
          "health_insurance": {
              "id": 3322,
              "name": "Amil",
              "is_deleted": false
          },
          "price": 772
      }, {
          "number": "12929321",
          "start_date": "2023-07-02T19:18:47.210Z",
          "patient": {
              "id": 221,
              "name": "Paciente com nome grante pra colocar text ellipsis testando nome com paciente grande"
          },
          "insurance_id": 3322,
          "health_insurance": {
              "id": 3322,
              "name": "Amil",
              "is_deleted": false
          },
          "price": 221
      }]
    };

    const insuranceSelect = document.getElementById("insuranceSelect");
    const searchInput = document.getElementById("searchInput");
    const startDatePicker = document.getElementById("startDatePicker");
    const guidesBody = document.getElementById("guidesBody");
    const pagination = document.getElementById("pagination");
    const todayButton = document.getElementById("todayButton");
    const sortDateIcon = document.getElementById("sortDate");

    let currentPage = 1;
    const guidesPerPage = 2;
    let isAscendingSort = false;

    function populateInsuranceOptions() {
      data.insurances.forEach(insurance => {
        const option = document.createElement("option");
        option.value = insurance.id;
        option.textContent = insurance.name;
        insuranceSelect.appendChild(option);
      });
    }

    function displayGuides() {
      guidesBody.innerHTML = "";
      const selectedInsuranceId = insuranceSelect.value;
      const searchText = searchInput.value.toLowerCase();
      const selectedStartDate = new Date(startDatePicker.value);

      let filteredGuides = data.guides.filter(guide => 
        (selectedInsuranceId === "" || guide.insurance_id.toString() === selectedInsuranceId) &&
        (searchText === "" || guide.number.includes(searchText) || guide.patient.name.toLowerCase().includes(searchText))
      );

      // Ordenação por data
      filteredGuides.sort((a, b) => {
        const dateA = new Date(a.start_date);
        const dateB = new Date(b.start_date);
        return isAscendingSort ? dateA - dateB : dateB - dateA;
      });

      const startIndex = (currentPage - 1) * guidesPerPage;
      const endIndex = startIndex + guidesPerPage;
      const paginatedGuides = filteredGuides.slice(startIndex, endIndex);

      paginatedGuides.forEach(guide => {
        const guideStartDate = new Date(guide.start_date);
        const tr = document.createElement("tr");
        tr.innerHTML = `
          <td>${guide.number}</td>
          <td>${guideStartDate.toLocaleDateString()}</td>
          <td class="patient-name">
            <img src="${guide.patient.thumb_url || 'https://via.placeholder.com/150x150.jpg'}" alt="${guide.patient.name}">
            ${guide.patient.name}
          </td>
          <td ${guide.health_insurance.is_deleted ? 'class="deleted-insurance"' : ''}>${guide.health_insurance.name}</td>
          <td>${guide.price.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' })}</td>
        `;
        guidesBody.appendChild(tr);
      });

      if (paginatedGuides.length === 0) {
        const tr = document.createElement("tr");
        tr.innerHTML = `<td colspan="5" style="text-align: center;">Nenhuma guia encontrada</td>`;
        guidesBody.appendChild(tr);
      }

      renderPagination(filteredGuides.length);
    }

    function renderPagination(totalGuides) {
      pagination.innerHTML = "";

      const totalPages = Math.ceil(totalGuides / guidesPerPage);

      if (totalPages > 1) {
        const prevButton = document.createElement("button");
        prevButton.textContent = "Anterior";
        prevButton.classList.add("btn", "btn-secondary", "mr-2");
        prevButton.addEventListener("click", () => {
          if (currentPage > 1) {
            currentPage--;
            displayGuides();
          }
        });
        pagination.appendChild(prevButton);

        const nextButton = document.createElement("button");
        nextButton.textContent = "Próximo";
        nextButton.classList.add("btn", "btn-secondary");
        nextButton.addEventListener("click", () => {
          if (currentPage < totalPages) {
            currentPage++;
            displayGuides();
          }
        });
        pagination.appendChild(nextButton);
      }
    }

    function toggleSort() {
      isAscendingSort = !isAscendingSort;
      sortDateIcon.classList.toggle("fa-sort-up", isAscendingSort);
      sortDateIcon.classList.toggle("fa-sort-down", !isAscendingSort);
      displayGuides();
    }

    insuranceSelect.addEventListener("change", displayGuides);
    searchInput.addEventListener("input", displayGuides);
    startDatePicker.addEventListener("change", displayGuides);
    todayButton.addEventListener("click", () => {
      startDatePicker.value = new Date().toISOString().slice(0, 10);
      displayGuides();
    });
    sortDateIcon.addEventListener("click", toggleSort);

    populateInsuranceOptions();
    displayGuides();
  </script>
</body>
</html>
